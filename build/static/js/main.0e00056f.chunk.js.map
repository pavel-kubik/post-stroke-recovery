{"version":3,"sources":["Canvas.js","App.js","serviceWorker.js","index.js"],"names":["Canvas","props","width","window","innerWidth","height","innerHeight","state","size","box","generateBox","updateDimensions","bind","resizeMethod","x","Math","random","y","fillColor","this","generateColor","borderColor","toString","substr","updateCanvas","addEventListener","refs","canvas","e","clientX","clientY","setState","ctx","getContext","clearRect","fillStyle","strokeStyle","lineWidth","strokeRect","fillRect","ref","React","Component","App","className","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+NA6FeA,E,kDAzFb,WAAYC,GAAO,IAAD,sBAChB,cAAMA,GAEN,IAAIC,EAAQC,OAAOC,WACfC,EAASF,OAAOG,YAJJ,OAMhB,EAAKC,MAAQ,CACTF,OAAQA,EACRH,MAAOA,EACPM,KAJO,IAKPC,IAAK,EAAKC,YAAYR,EAAOG,EALtB,MAOX,EAAKM,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBACxB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAbJ,E,wDAgBNV,EAAOG,EAAQG,GAGzB,MAAO,CACLM,EAHMC,KAAKC,UAAUd,EAAQ,EAAEM,GAAQA,EAIvCS,EAHMF,KAAKC,UAAUX,EAAS,EAAEG,GAAQA,EAIxCA,KAAMA,EACNU,UAAWC,KAAKC,gBAChBC,YAAaF,KAAKC,mB,sCAKpB,MAAO,IAAOL,KAAKC,SAASM,SAAS,IAAIC,QAAQ,K,0CAG9B,IAAD,OAClBJ,KAAKK,eACLrB,OAAOsB,iBAAiB,SAAUN,KAAKN,cAEvCM,KAAKO,KAAKC,OAAOF,iBAAiB,aAAa,SAACG,GAC9C,IAAInB,EAAM,EAAKF,MAAME,IACjBmB,EAAEC,SAAWpB,EAAIK,GACjBc,EAAEC,SAAWpB,EAAIK,EAAIL,EAAID,MACzBoB,EAAEE,SAAWrB,EAAIQ,GACjBW,EAAEE,SAAWrB,EAAIQ,EAAIR,EAAID,OAC3B,EAAKuB,SAAS,CAAEtB,IAAK,EAAKC,YACxB,EAAKH,MAAML,MACX,EAAKK,MAAMF,OACX,EAAKE,MAAMC,QACb,EAAKgB,qB,qCAKK,IAAD,EACcL,KAAKZ,MAA3BL,EADQ,EACRA,MAAOG,EADC,EACDA,OAAQI,EADP,EACOA,IAEduB,EAAMb,KAAKO,KAAKC,OAAOM,WAAW,MACxCD,EAAIE,UAAU,EAAG,EAAGhC,EAAOG,GAGzB2B,EAAIG,UAAa1B,EAAIS,UACrBc,EAAII,YAAc3B,EAAIY,YACtBW,EAAIK,UAAY,EAChBL,EAAIM,WAAW7B,EAAIK,EAAGL,EAAIQ,EAAGE,KAAKZ,MAAMC,KAAMC,EAAID,MAClDwB,EAAIO,SAAS9B,EAAIK,EAAGL,EAAIQ,EAAGE,KAAKZ,MAAMC,KAAMC,EAAID,Q,yCAKlDW,KAAKY,SAAS,CACX1B,OAAQF,OAAOG,YACfJ,MAAOC,OAAOC,e,qCAKfe,KAAKR,mBACLQ,KAAKK,iB,+BAIP,OACI,4BACEgB,IAAI,SACJnC,OAAQc,KAAKZ,MAAMF,OACnBH,MAAOiB,KAAKZ,MAAML,Y,GArFPuC,IAAMC,WCYZC,MAVf,WAGE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCGcC,QACW,cAA7B1C,OAAO2C,SAASC,UAEe,UAA7B5C,OAAO2C,SAASC,UAEhB5C,OAAO2C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.0e00056f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Canvas extends React.Component {\r\n\r\n  constructor(props){\r\n    super(props)\r\n    // modify state with functions if necessary, and inherit objects from props\r\n    let width = window.innerWidth;\r\n    let height = window.innerHeight;\r\n    let size = 100;\r\n    this.state = {\r\n        height: height,\r\n        width: width,\r\n        size: size,\r\n        box: this.generateBox(width, height, size)\r\n    }\r\n    this.updateDimensions = this.updateDimensions.bind(this);\r\n    this.resizeMethod = this.resizeMethod.bind(this);\r\n  }\r\n\r\n  generateBox(width, height, size) {\r\n    let x = Math.random()*(width - 2*size) + size;\r\n    let y = Math.random()*(height - 2*size) + size;\r\n    return {\r\n      x: x,\r\n      y: y,\r\n      size: size,\r\n      fillColor: this.generateColor(),\r\n      borderColor: this.generateColor()\r\n    }\r\n  }\r\n\r\n  generateColor () {\r\n    return '#' +  Math.random().toString(16).substr(-6);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.updateCanvas();\r\n    window.addEventListener('resize', this.resizeMethod);\r\n\r\n    this.refs.canvas.addEventListener('mousemove', (e) => {\r\n      let box = this.state.box;\r\n      if (e.clientX >= box.x &&\r\n          e.clientX <= box.x + box.size &&\r\n          e.clientY >= box.y &&\r\n          e.clientY <= box.y + box.size) {\r\n        this.setState({ box: this.generateBox(\r\n          this.state.width,\r\n          this.state.height,\r\n          this.state.size)});\r\n        this.updateCanvas();\r\n      }\r\n    });\r\n  }\r\n\r\n  updateCanvas() {\r\n    let {width, height, box} = this.state;\r\n\r\n    const ctx = this.refs.canvas.getContext('2d');\r\n    ctx.clearRect(0, 0, width, height);\r\n    //let boxes = this.state.boxes;\r\n    //boxes.forEach(function(box) {\r\n      ctx.fillStyle  = box.fillColor;\r\n      ctx.strokeStyle = box.borderColor;\r\n      ctx.lineWidth = 5;\r\n      ctx.strokeRect(box.x, box.y, this.state.size, box.size);\r\n      ctx.fillRect(box.x, box.y, this.state.size, box.size);\r\n    //}.bind(this));\r\n  }\r\n\r\n  updateDimensions() {\r\n    this.setState({\r\n       height: window.innerHeight,\r\n       width: window.innerWidth\r\n     });\r\n  }\r\n\r\n  resizeMethod() {\r\n      this.updateDimensions();\r\n      this.updateCanvas();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <canvas\r\n          ref=\"canvas\"\r\n          height={this.state.height}\r\n          width={this.state.width}>\r\n        </canvas>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Canvas\r\n","import React from 'react';\nimport './App.css';\nimport Canvas from './Canvas'\n\nfunction App() {\n\n\n  return (\n    <div className=\"App\">\n      <Canvas />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}